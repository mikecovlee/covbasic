function step1(n)
	define score=0
	for i=1 to n
		define ts=runtime.time()
		define fc=0
		loop
    		fc++
    	until runtime.time()-ts>=1000
    	end
    	score=score+fc
	end
	return to_integer(score/n)
end
function step2(n,k)
	function recursion(n)
		if n>0
			return recursion(n-1)
		else
			return
		end
	end
	define score=0
	for i=1 to k
		define ts=runtime.time()
		recursion(n)
		score=score+runtime.time()-ts
	end
	return to_integer(score/k)
end
function step3(n,k)
	define precision=10^(-n)
	function integral(func,begin,end_)
	    define sum=0
	    define x=begin
	    while x<=end_
	        sum=sum+func(x)*precision
	        x=x+precision
	    end
	    return sum
	end
	function f(x)
	    return math.sqrt(1-x^2)
	end
	define score=0
	for i=1 to k
		define ts=runtime.time()
		integral(f,0,1)
		score=score+runtime.time()-ts
	end
	return to_integer(score/k)
end
function quicksort(a,m,n)
	if n<=m
		return 0
	end
	define i=m-1
	define j=n
	define v=a[n]
	loop
		loop
			++i
			if i>=a.size()
				break
			end
		until a[i]>=v
		end
		loop
			--j
			if j<0
				break
			end
		until a[j]<=v
		end
		if i>=j
			break
		end
		swap(a[i],a[j])
	end
	swap(a[i],a[n])
	quicksort(a,m,j)
	quicksort(a,i+1,n)
end
function step4(n,k)
	define score=0
	for i=1 to k
		define a={}
		for i=0 to n
			a.push_back(runtime.randint(0,n))
		end
		define ts=runtime.time()
		quicksort(a,0,a.size()-1)
		score=score+runtime.time()-ts
	end
	return to_integer(score/k)
end
system.println("Covariant Basic Performance Benchmark")
system.println("Step 1:Speed of simple statement execution")
system.println("Result:",to_string(step1(5)))
system.println("Step 2:Speed of function recursion")
system.println("Result:",to_string(step2(1000,5)))
system.println("Step 3:Speed of integral")
system.println("Result:",to_string(step3(5,5)))
system.println("Step 4:Speed of quick sort(10000 Data)")
system.println("Result:",to_string(step4(10000,5)))
